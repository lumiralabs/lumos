{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"lumos","text":"<p>Simple utils for building AI apps. Available as python API and a server.</p>"},{"location":"#local-dev","title":"Local Dev","text":"<pre><code>uv sync --extra dev &amp;&amp; uv pip install -e .\n</code></pre>"},{"location":"#install","title":"Install","text":"<pre><code>uv pip install git+https://github.com/lumiralabs/lumos\n</code></pre>"},{"location":"#python-api","title":"Python API","text":""},{"location":"#1-structured-outputs","title":"1. Structured Outputs","text":"<pre><code>from lumos import lumos\nfrom pydantic import BaseModel\n\n\nclass Response(BaseModel):\n    steps: list[str]\n    final_answer: str\n\n\nlumos.call_ai(\n    messages=[\n        {\"role\": \"system\", \"content\": \"You are a mathematician.\"},\n        {\"role\": \"user\", \"content\": \"What is 100 * 100?\"},\n    ],\n    response_format=Response,\n    model=\"gpt-4o-mini\",\n)\n# Response(steps=['Multiply 100 by 100.', '100 * 100 = 10000.'], final_answer='10000')\n</code></pre>"},{"location":"#2-embeddings-api","title":"2. Embeddings API","text":"<pre><code>lumos.get_embedding(\"hello world\")\n#[0.12, ..., ..., 0.34]\n</code></pre>"},{"location":"#3-book-parser","title":"3. Book Parser","text":"<p><pre><code>python -m lumos.book.parser path/to/book.pdf\n</code></pre> <pre><code>```python\nfrom lumos import book_parser\n\nbook_parser.toc(\"path/to/book.pdf\", level=2)\n</code></pre> <pre><code>Table of Contents\n\u251c\u2500\u2500 Chapter 1. Introducing Asyncio (Pages: 1-8)\n\u2502   \u251c\u2500\u2500 The Restaurant of ThreadBots (Pages: 1-5)\n\u2502   \u251c\u2500\u2500 Epilogue (Pages: 6-5)\n\u2502   \u2514\u2500\u2500 What Problem Is Asyncio Trying to Solve? (Pages: 6-8)\n\u251c\u2500\u2500 Chapter 2. The Truth About Threads (Pages: 9-20)\n\u2502   \u251c\u2500\u2500 Benefits of Threading (Pages: 10-10)\n\u2502   \u251c\u2500\u2500 Drawbacks of Threading (Pages: 11-13)\n\u2502   \u2514\u2500\u2500 Case Study: Robots and Cutlery (Pages: 14-20)\n\u251c\u2500\u2500 Chapter 3. Asyncio Walk-Through (Pages: 21-74)\n\u2502   \u251c\u2500\u2500 Quickstart (Pages: 22-27)\n\u2502   \u251c\u2500\u2500 The Tower of Asyncio (Pages: 28-30)\n\u2502   \u251c\u2500\u2500 Coroutines (Pages: 31-36)\n\u2502   \u251c\u2500\u2500 Event Loop (Pages: 37-38)\n\u2502   \u251c\u2500\u2500 Tasks and Futures (Pages: 39-45)\n\u2502   \u251c\u2500\u2500 Async Context Managers: async with (Pages: 46-49)\n\u2502   \u251c\u2500\u2500 Async Iterators: async for (Pages: 50-52)\n\u2502   \u251c\u2500\u2500 Simpler Code with Async Generators (Pages: 53-54)\n\u2502   \u251c\u2500\u2500 Async Comprehensions (Pages: 55-56)\n\u2502   \u2514\u2500\u2500 Starting Up and Shutting Down (Gracefully!) (Pages: 57-74)\n\u251c\u2500\u2500 Chapter 4. 20 Asyncio Libraries You Aren\u2019t Using (But\u2026Oh, Never Mind) (Pages: 75-128)\n\u2502   \u251c\u2500\u2500 Streams (Standard Library) (Pages: 76-87)\n\u2502   \u251c\u2500\u2500 Twisted (Pages: 88-90)\n\u2502   \u251c\u2500\u2500 The Janus Queue (Pages: 91-91)\n\u2502   \u251c\u2500\u2500 aiohttp (Pages: 92-97)\n\u2502   \u251c\u2500\u2500 \u00d8MQ (ZeroMQ) (Pages: 98-109)\n\u2502   \u251c\u2500\u2500 asyncpg and Sanic (Pages: 110-125)\n\u2502   \u2514\u2500\u2500 Other Libraries and Resources (Pages: 126-128)\n\u2514\u2500\u2500 Chapter 5. Concluding Thoughts (Pages: 129-130)\n</code></pre></p>"},{"location":"#deploy","title":"Deploy","text":"<p>We also expose lumos as a server authenticated by an API key. <pre><code>uv run uvicorn lumos.server.app:app\n</code></pre> then curl: <pre><code>curl -X POST \"http://localhost:8000/gen\" \\\n-H \"Content-Type: application/json\" \\\n-H \"X-API-Key: 12345678\" \\\n-d '{\n  \"messages\": [\n    {\"role\": \"system\", \"content\": \"You are a helpful assistant\"},\n    {\"role\": \"user\", \"content\": \"What is the capital of France?\"}\n  ],\n  \"response_schema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"final_answer\": {\n        \"title\": \"Final Answer\",\n        \"type\": \"string\"\n      }\n    },\n    \"required\": [\"final_answer\"],\n    \"title\": \"Response\"\n  },\n  \"model\": \"gpt-4o-mini\"\n}'\n</code></pre></p> <p>or use the python client: <pre><code>from lumos import LumosClient\n\nlumos = LumosClient(\"http://localhost:8000\", \"12345678\")\n\nawait lumos.call_ai_async(\n    messages=[\n        {\"role\": \"system\", \"content\": \"You are a helpful assistant\"},\n        {\"role\": \"user\", \"content\": \"What is the capital of France?\"}\n    ],\n    response_schema={\n        \"type\": \"object\",\n        \"properties\": {\n            \"final_answer\": {\n                \"title\": \"Final Answer\",\n                \"type\": \"string\"\n            }\n        },\n        \"required\": [\"final_answer\"],\n        \"title\": \"Response\"\n    },\n    model=\"gpt-4o-mini\"\n)\n</code></pre></p>"},{"location":"ai_utils/","title":"Ai utils","text":""},{"location":"ai_utils/#title-ai-utilities","title":"title: AI Utilities","text":""},{"location":"book_parser/","title":"Book Parser","text":"<p>The book parser module provides functionality to parse PDF books and extract structured content including table of contents, sections, and text chunks.</p>"},{"location":"book_parser/#usage","title":"Usage","text":""},{"location":"book_parser/#command-line-interface","title":"Command Line Interface","text":"<pre><code>python -m lumos.book.parser path/to/book.pdf\n</code></pre>"},{"location":"book_parser/#python-api","title":"Python API","text":"<pre><code>from lumos import book_parser\n\n# Get table of contents with specified depth level\nbook_parser.toc(\"path/to/book.pdf\", level=2)\n</code></pre>"},{"location":"book_parser/#features","title":"Features","text":"<ol> <li>Table of Contents Extraction: Automatically extracts hierarchical table of contents from PDFs</li> <li>Section Parsing: Breaks down the book into logical sections based on the TOC</li> <li>Smart Chunking: Creates meaningful text chunks for each section</li> <li>Metadata Extraction: Extracts PDF metadata like title, author, etc.</li> <li>Special Handling: </li> <li>Detects and handles two-column scientific papers differently</li> <li>Supports both PDF and Markdown inputs</li> <li>Sanitizes and normalizes extracted content</li> </ol>"},{"location":"book_parser/#output-format","title":"Output Format","text":"<p>The parser outputs a structured <code>Book</code> object containing: - PDF metadata (title, author, subject, keywords) - Hierarchical sections with:   - Title   - Page numbers   - Text elements   - Processed chunks   - Nested subsections</p>"},{"location":"book_parser/#development-tools","title":"Development Tools","text":"<p>For development and debugging, the CLI supports different view types:</p> <pre><code># View raw partitions\npython -m lumos.book.parser book.pdf partitions\n\n# View processed sections\npython -m lumos.book.parser book.pdf sections\n\n# View text chunks\npython -m lumos.book.parser book.pdf chunks\n</code></pre>"},{"location":"client/","title":"Client","text":""},{"location":"client/#title-ai-utilities","title":"title: AI Utilities","text":""},{"location":"server/","title":"Server","text":""},{"location":"server/#title-ai-utilities","title":"title: AI Utilities","text":""}]}