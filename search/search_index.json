{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"lumos","text":"<p>Simple utils for building AI apps. Available as Python API and deployable with server/client.</p>"},{"location":"#install","title":"Install","text":"<pre><code>pip install git+https://github.com/lumiralabs/lumos\n</code></pre>"},{"location":"#python-api","title":"Python API","text":""},{"location":"#1-structured-outputs","title":"1. Structured Outputs","text":"<p>Easily generate validated pydantic objects.</p> <pre><code>from lumos import lumos\nfrom pydantic import BaseModel\n\n\nclass Response(BaseModel):\n    steps: list[str]\n    final_answer: str\n\n\nlumos.call_ai(\n    messages=[\n        {\"role\": \"system\", \"content\": \"You are a mathematician.\"},\n        {\"role\": \"user\", \"content\": \"What is 100 * 100?\"},\n    ],\n    response_format=Response,\n    model=\"gpt-4o-mini\",\n)\n# Response(steps=['Multiply 100 by 100.', '100 * 100 = 10000.'], final_answer='10000')\n</code></pre>"},{"location":"#2-embeddings-api","title":"2. Embeddings API","text":"<pre><code>lumos.get_embedding(\"hello world\")\n#[0.12, ..., ..., 0.34]\n</code></pre>"},{"location":"#3-book-parser","title":"3. Book Parser","text":"<p>Lumos has useful book parsing utilities (with AI) to </p> <ul> <li>detect missing table of contents</li> <li>organize extracted text into sections</li> <li>chunk the data</li> </ul> <p><pre><code>python -m lumos.book.toc path/to/book.pdf\n</code></pre> <pre><code>Table of Contents\n\u251c\u2500\u2500 Chapter 1. Introducing Asyncio (Pages: 1-8)\n\u2502   \u251c\u2500\u2500 The Restaurant of ThreadBots (Pages: 1-5)\n\u2502   \u251c\u2500\u2500 Epilogue (Pages: 6-5)\n\u2502   \u2514\u2500\u2500 What Problem Is Asyncio Trying to Solve? (Pages: 6-8)\n\u251c\u2500\u2500 Chapter 2. The Truth About Threads (Pages: 9-20)\n\u2502   \u251c\u2500\u2500 Benefits of Threading (Pages: 10-10)\n\u2502   \u251c\u2500\u2500 Drawbacks of Threading (Pages: 11-13)\n\u2502   \u2514\u2500\u2500 Case Study: Robots and Cutlery (Pages: 14-20)\n\u251c\u2500\u2500 Chapter 3. Asyncio Walk-Through (Pages: 21-74)\n\u2502   \u251c\u2500\u2500 Quickstart (Pages: 22-27)\n\u2502   \u251c\u2500\u2500 The Tower of Asyncio (Pages: 28-30)\n\u2502   \u251c\u2500\u2500 Coroutines (Pages: 31-36)\n\u2502   \u251c\u2500\u2500 Event Loop (Pages: 37-38)\n\u2502   \u251c\u2500\u2500 Tasks and Futures (Pages: 39-45)\n\u2502   \u251c\u2500\u2500 Async Context Managers: async with (Pages: 46-49)\n\u2502   \u251c\u2500\u2500 Async Iterators: async for (Pages: 50-52)\n\u2502   \u251c\u2500\u2500 Simpler Code with Async Generators (Pages: 53-54)\n\u2502   \u251c\u2500\u2500 Async Comprehensions (Pages: 55-56)\n\u2502   \u2514\u2500\u2500 Starting Up and Shutting Down (Gracefully!) (Pages: 57-74)\n\u251c\u2500\u2500 Chapter 4. 20 Asyncio Libraries You Aren\u2019t Using (But\u2026Oh, Never Mind) (Pages: 75-128)\n\u2502   \u251c\u2500\u2500 Streams (Standard Library) (Pages: 76-87)\n\u2502   \u251c\u2500\u2500 Twisted (Pages: 88-90)\n\u2502   \u251c\u2500\u2500 The Janus Queue (Pages: 91-91)\n\u2502   \u251c\u2500\u2500 aiohttp (Pages: 92-97)\n\u2502   \u251c\u2500\u2500 \u00d8MQ (ZeroMQ) (Pages: 98-109)\n\u2502   \u251c\u2500\u2500 asyncpg and Sanic (Pages: 110-125)\n\u2502   \u2514\u2500\u2500 Other Libraries and Resources (Pages: 126-128)\n\u2514\u2500\u2500 Chapter 5. Concluding Thoughts (Pages: 129-130)\n</code></pre></p>"},{"location":"book_parser/","title":"Book Parser","text":"<p>The Book Parser extracts useful entities like:</p> <ol> <li>Table of Contents</li> <li>Section Data</li> <li>Chunks</li> </ol>"},{"location":"book_parser/#1-table-of-contents","title":"1. Table of Contents","text":"<p><pre><code>python -m lumos.book.toc path/to/book.pdf\n</code></pre> <pre><code>from lumos import book_parser\n\nbook_parser.toc(\"path/to/book.pdf\", level=2)\n</code></pre> <pre><code>Table of Contents\n\u251c\u2500\u2500 Chapter 1. Introducing Asyncio (Pages: 1-8)\n\u2502   \u251c\u2500\u2500 The Restaurant of ThreadBots (Pages: 1-5)\n\u2502   \u251c\u2500\u2500 Epilogue (Pages: 6-5)\n\u2502   \u2514\u2500\u2500 What Problem Is Asyncio Trying to Solve? (Pages: 6-8)\n\u251c\u2500\u2500 Chapter 2. The Truth About Threads (Pages: 9-20)\n\u2502   \u251c\u2500\u2500 Benefits of Threading (Pages: 10-10)\n\u2502   \u251c\u2500\u2500 Drawbacks of Threading (Pages: 11-13)\n\u2502   \u2514\u2500\u2500 Case Study: Robots and Cutlery (Pages: 14-20)\n\u251c\u2500\u2500 Chapter 3. Asyncio Walk-Through (Pages: 21-74)\n\u2502   \u251c\u2500\u2500 Quickstart (Pages: 22-27)\n\u2502   \u251c\u2500\u2500 The Tower of Asyncio (Pages: 28-30)\n\u2502   \u251c\u2500\u2500 Coroutines (Pages: 31-36)\n\u2502   \u251c\u2500\u2500 Event Loop (Pages: 37-38)\n\u2502   \u251c\u2500\u2500 Tasks and Futures (Pages: 39-45)\n\u2502   \u251c\u2500\u2500 Async Context Managers: async with (Pages: 46-49)\n\u2502   \u251c\u2500\u2500 Async Iterators: async for (Pages: 50-52)\n\u2502   \u251c\u2500\u2500 Simpler Code with Async Generators (Pages: 53-54)\n\u2502   \u251c\u2500\u2500 Async Comprehensions (Pages: 55-56)\n\u2502   \u2514\u2500\u2500 Starting Up and Shutting Down (Gracefully!) (Pages: 57-74)\n\u251c\u2500\u2500 Chapter 4. 20 Asyncio Libraries You Aren\u2019t Using (But\u2026Oh, Never Mind) (Pages: 75-128)\n\u2502   \u251c\u2500\u2500 Streams (Standard Library) (Pages: 76-87)\n\u2502   \u251c\u2500\u2500 Twisted (Pages: 88-90)\n\u2502   \u251c\u2500\u2500 The Janus Queue (Pages: 91-91)\n\u2502   \u251c\u2500\u2500 aiohttp (Pages: 92-97)\n\u2502   \u251c\u2500\u2500 \u00d8MQ (ZeroMQ) (Pages: 98-109)\n\u2502   \u251c\u2500\u2500 asyncpg and Sanic (Pages: 110-125)\n\u2502   \u2514\u2500\u2500 Other Libraries and Resources (Pages: 126-128)\n\u2514\u2500\u2500 Chapter 5. Concluding Thoughts (Pages: 129-130)\n</code></pre></p>"},{"location":"book_parser/#2-section-data","title":"2. Section Data","text":"<p><pre><code>python -m lumos.book.parser path/to/book.pdf sections\n</code></pre> <pre><code>from lumos import book_parser\n\nsections = book_parser.section(\"path/to/book.pdf\")\n</code></pre></p> <pre><code>                                                                  Document Sections                                                                   \n\u250f\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503    \u2503        \u2503                                                                   \u2503                                                                  \u2503\n\u2503 ID \u2503 Level  \u2503 Title                                                             \u2503 Content                                                          \u2503\n\u2503    \u2503        \u2503                                                                   \u2503                                                                  \u2503\n\u2521\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502    \u2502        \u2502                                                                   \u2502                                                                  \u2502\n\u2502 1  \u2502 1      \u2502 Chapter 1. Introducing Asyncio                                    \u2502 CHAPTER 1 Introducing Asyncio                                    \u2502\n\u2502    \u2502        \u2502                                                                   \u2502                                                                  \u2502\n\u2502    \u2502        \u2502                                                                   \u2502 My story is a lot like yours, only more interesting \u2019cause it    \u2502\n\u2502    \u2502        \u2502                                                                   \u2502 involves robots.                                                 \u2502\n\u2502    \u2502        \u2502                                                                   \u2502                                                                  \u2502\n\u2502    \u2502        \u2502                                                                   \u2502 \u2014Bender, Futurama episode \u201c30% Iron Chef \u201d                       \u2502\n\u2502    \u2502        \u2502                                                                   \u2502                                                                  \u2502\n\u2502    \u2502        \u2502                                                                   \u2502 The most common question I receive about Asyn...                 \u2502\n\u2502    \u2502        \u2502                                                                   \u2502                                                                  \u2502\n\u2502    \u2502        \u2502                                                                   \u2502                                                                  \u2502\n\u2502 2  \u2502 1.1    \u2502 The Restaurant of ThreadBots                                      \u2502 The Restaurant of ThreadBots The year is 2051, and you find      \u2502\n\u2502    \u2502        \u2502                                                                   \u2502 yourself in the restaurant business. Automation, largely by      \u2502\n\u2502    \u2502        \u2502                                                                   \u2502 robot workers, powers most of the economy, but it turns out that \u2502\n\u2502    \u2502        \u2502                                                                   \u2502 humans still en...                                               \u2502\n\u2502    \u2502        \u2502                                                                   \u2502                                                                  \u2502\n\u2502    \u2502        \u2502                                                                   \u2502                                                                  \u2502\n\u2502 3  \u2502 1.3    \u2502 What Problem Is Asyncio Trying to Solve?                          \u2502 What Problem Is Asyncio Trying to Solve? For I/O-bound           \u2502\n\u2502    \u2502        \u2502                                                                   \u2502 workloads, there are exactly (only!) two reasons to use          \u2502\n\u2502    \u2502        \u2502                                                                   \u2502 async-based concurrency over thread-based concurrency:           \u2502\n\u2502    \u2502        \u2502                                                                   \u2502                                                                  \u2502\n\u2502    \u2502        \u2502                                                                   \u2502 Asyncio offers a safer alternativ...                             \u2502\n\u2502    \u2502        \u2502                                                                   \u2502                                                                  \u2502\n\u2502    \u2502        \u2502                                                                   \u2502                                                                  \u2502\n\u2502 4  \u2502 2      \u2502 Chapter 2. The Truth About Threads                                \u2502 CHAPTER 2 The Truth About Threads                                \u2502\n\u2502    \u2502        \u2502                                                                   \u2502                                                                  \u2502\n\u2502    \u2502        \u2502                                                                   \u2502 Let\u2019s be frank for a moment\u2014you really don\u2019t want to use Curio.  \u2502\n\u2502    \u2502        \u2502                                                                   \u2502 All things equal, you should probably be programming with        \u2502\n\u2502    \u2502        \u2502                                                                   \u2502 threads. Yes, threads. THOSE threads. Seri\u2010...                   \u2502\n\u2502    \u2502        \u2502                                                                   \u2502                                                                  \u2502\n\u2502    \u2502        \u2502                                                                   \u2502                                                                  \u2502\n\u2502 5  \u2502 2.1    \u2502 Benefits of Threading                                             \u2502 Benefits of Threading These are the main benefits of threading:  \u2502\n\u2502    \u2502        \u2502                                                                   \u2502                                                                  \u2502\n\u2502    \u2502        \u2502                                                                   \u2502 Ease of reading code                                             \u2502\n\u2502    \u2502        \u2502                                                                   \u2502                                                                  \u2502\n\u2502    \u2502        \u2502                                                                   \u2502 Your code can run concurrently, but still be set out in a very   \u2502\n\u2502    \u2502        \u2502                                                                   \u2502 simple, top-down linear sequence of commands to th...            \u2502\n</code></pre>"},{"location":"book_parser/#3-chunks","title":"3. Chunks","text":"<p><pre><code>python -m lumos.book.parser path/to/book.pdf chunks\n</code></pre> <pre><code>from lumos import book_parser\n\nchunks = book_parser.chunks(\"path/to/book.pdf\")\n</code></pre></p> <pre><code>                                                                   Document Chunks                                                                    \n\u250f\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503     \u2503           \u2503                                                                                                                           \u2503      \u2503\n\u2503 #   \u2503 Type      \u2503 Text                                                                                                                      \u2503 Page \u2503\n\u2503     \u2503           \u2503                                                                                                                           \u2503      \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502     \u2502           \u2502                                                                                                                           \u2502      \u2502\n\u2502 1   \u2502 &lt;no type&gt; \u2502 CHAPTER 1 Introducing Asyncio                                                                                             \u2502 13   \u2502\n\u2502     \u2502           \u2502                                                                                                                           \u2502      \u2502\n\u2502     \u2502           \u2502 My story is a lot like yours, only more interesting \u2019cause it involves robots.                                            \u2502      \u2502\n\u2502     \u2502           \u2502                                                                                                                           \u2502      \u2502\n\u2502     \u2502           \u2502 \u2014Bender, Futurama episode \u201c30% Iron Chef \u201d                                                                                \u2502      \u2502\n\u2502     \u2502           \u2502                                                                                                                           \u2502      \u2502\n\u2502     \u2502           \u2502 The most common question I receive about Asyncio in Python 3 is this: \u201cWhat is it, and what do I do with it?\u201d The answer  \u2502      \u2502\n\u2502     \u2502           \u2502 you\u2019ll hear most frequently is likely something about being able to execute multiple concurrent HTTP requests in a single \u2502      \u2502\n\u2502     \u2502           \u2502 program. But there is more to it than that\u2014much more. Asyncio requires changing how you think about structuring programs. \u2502      \u2502\n\u2502     \u2502           \u2502                                                                                                                           \u2502      \u2502\n\u2502     \u2502           \u2502 The following story provides a backdrop for gaining this understanding. The central focus of Asyncio is on how best to    \u2502      \u2502\n\u2502     \u2502           \u2502 best perform multiple tasks at the same time\u2014and not just any tasks, but specifically tasks that involve waiting periods. \u2502      \u2502\n\u2502     \u2502           \u2502 The key insight required with this style of programming is that while you wait for this task to com\u2010 plete, work on other \u2502      \u2502\n\u2502     \u2502           \u2502 tasks can be performed.                                                                                                   \u2502      \u2502\n\u2502     \u2502           \u2502                                                                                                                           \u2502      \u2502\n\u2502     \u2502           \u2502                                                                                                                           \u2502      \u2502\n\u2502 2   \u2502 &lt;no type&gt; \u2502 Epilogue In our story, each robot worker in the restaurant is a single thread. The key observa\u2010 tion in the story is that \u2502 18   \u2502\n\u2502     \u2502           \u2502 the nature of the work in the restaurant involves a great deal of waiting, just as requests.get() is waiting for a        \u2502      \u2502\n\u2502     \u2502           \u2502 response from a server.                                                                                                   \u2502      \u2502\n\u2502     \u2502           \u2502                                                                                                                           \u2502      \u2502\n\u2502     \u2502           \u2502 In a restaurant, the worker time spent waiting isn\u2019t huge when slow humans are doing manual work, but when                \u2502      \u2502\n\u2502     \u2502           \u2502 super-efficient and quick robots are doing the work, nearly all their time is spent waiting. In computer programming, the \u2502      \u2502\n\u2502     \u2502           \u2502 same is true when net\u2010 work programming is involved. CPUs do work and wait on network I/O. CPUs in modern computers are   \u2502      \u2502\n\u2502     \u2502           \u2502 extremely fast\u2014hundreds of thousands of times faster than network traffic. Thus, CPUs running networking programs spend a \u2502      \u2502\n\u2502     \u2502           \u2502 great deal of time waiting.                                                                                               \u2502      \u2502\n\u2502     \u2502           \u2502                                                                                                                           \u2502      \u2502\n\u2502     \u2502           \u2502                                                                                                                           \u2502      \u2502\n\u2502 3   \u2502 &lt;no type&gt; \u2502 The insight in the story is that programs can be written to explicitly direct the CPU to move between work tasks as       \u2502 18   \u2502\n\u2502     \u2502           \u2502 necessary. Although there is an improvement in econ\u2010 omy (using fewer CPUs for the same work), the real advantage,        \u2502      \u2502\n\u2502     \u2502           \u2502 compared to a threading (multi-CPU) approach, is the elimination of race conditions.                                      \u2502      \u2502\n\u2502     \u2502           \u2502                                                                                                                           \u2502      \u2502\n\u2502     \u2502           \u2502 It\u2019s not all roses, however: as we found in the story, there are benefits and drawbacks to most technology solutions. The \u2502      \u2502\n\u2502     \u2502           \u2502 introduction of the LoopBot solved a certain class of problems but also introduced new problems\u2014not the least of which is \u2502      \u2502\n\u2502     \u2502           \u2502 that the res\u2010 taurant owner had to learn a slightly different way of programming.                                         \u2502      \u2502\n\u2502     \u2502           \u2502                                                                                                                           \u2502      \u2502\n\u2502     \u2502           \u2502                                                                                                                           \u2502      \u2502\n\u2502 4   \u2502 &lt;no type&gt; \u2502 The Restaurant of ThreadBots The year is 2051, and you find yourself in the restaurant business. Automation, largely by   \u2502 13   \u2502\n\u2502     \u2502           \u2502 robot workers, powers most of the economy, but it turns out that humans still enjoy going out to eat once in a while. In  \u2502      \u2502\n\u2502     \u2502           \u2502 your restaurant, all the employees are robots\u2014humanoid, of course, but unmistakably robots. The most successful manu\u2010     \u2502      \u2502\n\u2502     \u2502           \u2502 facturer of robots is Threading Inc., and robot workers from this company have come to be called \u201cThreadBots.\u201d            \u2502      \u2502\n\u2502     \u2502           \u2502                                                                                                                           \u2502      \u2502\n\u2502     \u2502           \u2502 Except for this small robotic detail, your restaurant looks and operates like one of those old-time establishments from,  \u2502      \u2502\n\u2502     \u2502           \u2502 say, 2020. Your guests will be looking for that vintage experience. They want fresh food prepared from scratch. They want \u2502      \u2502\n\u2502     \u2502           \u2502 to sit at tables. They want to wait for their meals\u2014but only a little. They want to pay at the end, and they sometimes    \u2502      \u2502\n\u2502     \u2502           \u2502 even want to leave a tip, for old times\u2019 sake.                                                                            \u2502      \u2502\n\u2502     \u2502           \u2502                                                                                                                           \u2502      \u2502\n\u2502     \u2502           \u2502                                                                                                                           \u2502      \u2502\n\u2502 5   \u2502 &lt;no type&gt; \u2502 Being new to the robotic restaurant business, you do what every other restaurateur does and hire a small fleet of robots: \u2502 14   \u2502\n\u2502     \u2502           \u2502 one to greet diners at the front desk (GreetBot), one to wait tables and take orders (WaitBot), one to do the cooking     \u2502      \u2502\n\u2502     \u2502           \u2502 (ChefBot), and one to manage the bar (WineBot).                                                                           \u2502      \u2502\n\u2502     \u2502           \u2502                                                                                                                           \u2502      \u2502\n\u2502     \u2502           \u2502 Hungry diners arrive at the front desk and are welcomed by GreetBot, your front-of- house ThreadBot. They are then        \u2502      \u2502\n\u2502     \u2502           \u2502 directed to a table, and once they are seated, WaitBot takes their order. Then WaitBot brings that order to the kitchen   \u2502      \u2502\n\u2502     \u2502           \u2502 on a slip of paper (because you want to preserve that old-time experience, remember?). ChefBot looks at the order on the  \u2502      \u2502\n\u2502     \u2502           \u2502 slip and begins preparing the food. WaitBot will periodically check whether the food is ready, and when it is, will       \u2502      \u2502\n\u2502     \u2502           \u2502 immediately take the dishes to the cus\u2010 tomers\u2019 table. When the guests are ready to leave, they return to GreetBot, who   \u2502      \u2502\n\u2502     \u2502           \u2502 calcu\u2010 lates the bill, takes their payment, and graciously wishes them a pleasant evening.                                \u2502      \u2502\n</code></pre>"},{"location":"server_client/","title":"Server and Client","text":"<p>The entire Lumos API is also available as a server / client fashion to deploy and remotely call the API. </p> <p>A seperate service can be useful isolation for</p> <ol> <li>Running compute heavy book parsing operations</li> <li>A centralised AI server for your org</li> </ol>"},{"location":"server_client/#deploy-server","title":"Deploy (Server)","text":"<p>Simply host the FastAPI server, authenticated by an API key: <pre><code>LUMOS_API_KEY=12345678 \nuv run uvicorn lumos.server.app:app --host 0.0.0.0 --port 8000\n</code></pre></p>"},{"location":"server_client/#client-sdk","title":"Client SDK","text":"<p>Once deployed, you can conveniently access the service with the <code>LumosClient</code> that fully mirrors the Python API. <pre><code>from lumos import lumos\n</code></pre> can be safely replaced with  <pre><code>from lumos import LumosClient\nlumos = LumosClient(host=\"http://localhost:8000\", api_key=\"12345678\")\n</code></pre></p> <p>Now you can do similar operations like: <pre><code>from pydantic import BaseModel\n\nclass Response(BaseModel):\n    steps: list[str]\n    final_answer: str\n\n\nlumos.call_ai(\n    messages=[\n        {\"role\": \"system\", \"content\": \"You are a mathematician.\"},\n        {\"role\": \"user\", \"content\": \"What is 100 * 100?\"},\n    ],\n    response_format=Response,\n    model=\"gpt-4o-mini\",\n)\n# Response(steps=['Multiply 100 by 100.', '100 * 100 = 10000.'], final_answer='10000')\n</code></pre></p>"},{"location":"examples/asyncio/","title":"Asyncio (OReilly)","text":"<p>In this post, we will show you how easy it is to code asyncio.</p>"}]}